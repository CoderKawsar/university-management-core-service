// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id         String    @id @default(uuid())
  year       Int
  title      String
  code       String
  startMonth String
  endMonth   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  students   Student[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String

  students  Student[]
  faculties Faculty[]

  @@map("academic_departments")
}

model Student {
  id           String  @id @default(uuid())
  studentId    String  @unique
  firstName    String
  lastName     String
  middleName   String?
  profileImage String?
  email        String  @unique
  contactNo    String  @unique
  gender       String
  bloodGroup   String?

  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId String

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

model Faculty {
  id           String @id @default(uuid())
  facultyId    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faculties")
}

model Building {
  id    String @id @default(uuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms      Room[]

  @@map("buildings")
}

model Room {
  id         String @id @default(uuid())
  roomNumber String
  floor      String

  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rooms")
}

model Course {
  id String @id @default(uuid())
  title String
  code String
  credits Float @default(0)

  preRequisite CourseToPrerequisite[] @relation("CourseToPreRequisite")
  preRequisiteFor CourseToPrerequisite[] @relation("PreRequisiteToCourse")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("courses")
}

model CourseToPrerequisite {
  courseId String
  preRequisiteId String

  course Course @relation(fields: [courseId], references: [id], name: "CourseToPreRequisite")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "PreRequisiteToCourse")

  @@id([courseId, preRequisiteId])
}
